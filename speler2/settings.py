"""Django settings for speler2 project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import sys
from pathlib import Path

from environs import Env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = Env()
env.read_env()  # read .env file, if it exists


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG')
DEVELOPER = env.bool('DEVELOPER', False)

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    '10.26.18.138',
    '192.168.1.100',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main.apps.MainConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'main.middleware.timezone_middleware.TimezoneMiddleware',
]

ROOT_URLCONF = 'speler2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'speler2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

APPEND_SLASH = True

# logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s %(levelname)-8s %(message)s {%(filename)s:%(lineno)d}',
        },
        'compact': {
            'format': '%(levelname)-7s %(message)s',
        },
    },
    'handlers': {
        'file': {
            'level': env('LOG_LEVEL'),
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': BASE_DIR / '.logs' / 'wsgi.log',
            'when': 'midnight',
            'backupCount': 30,
            'delay': True,
            'formatter': 'standard',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'compact',
            'stream': sys.stdout,
        },
    },
    'root': {
        'handlers': ['file', 'console'],
        'level': env('LOG_LEVEL'),
        'propagate': False,
    },
    'loggers': {
        'django': {
            'propagate': False,
        },
        'pylast': {
            'handlers': ['console'],
            'level': 'CRITICAL',  # Only log CRITICAL messages
            'propagate': False,
        },
    },
}


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}


MUSIC_DIR = Path(env('MUSIC_DIR'))
USE_MP3 = env.bool('USE_MP3')
ALBUMS_DIR = BASE_DIR / '.albums'
LYRICS_DIR = BASE_DIR / '.lyrics'

STATICFILES_DIRS = [
    MUSIC_DIR,
    ALBUMS_DIR,
    LYRICS_DIR,
]


LASTFM_API_KEY = env('LASTFM_API_KEY')
LASTFM_SECRET = env('LASTFM_SECRET')
LASTFM_ENABLE = bool(LASTFM_API_KEY and LASTFM_SECRET)
LASTFM_SESSION_FILE = BASE_DIR / 'lastfm.session'
